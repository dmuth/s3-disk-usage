#!/usr/bin/env python3
#
# This script will read in the JSON generated by a ListObjectVersions
# call to Amazon S3, combine the Versions and DeleteMarkers arrays
# into a unified data structure, and print out statistics on disk usage,
# *especially* for things like deleted files.


import argparse
import json
import logging
import os
import sys


logging.basicConfig(level=logging.INFO, format='%(asctime)s: %(levelname)s: %(message)s')
logger = logging.getLogger()

#
# Parse our arguments.
#
parser = argparse.ArgumentParser(description = "Get stats from files in an S3 bucket")
#
# This one was a bit tricky, but if I want an optional positional argument,
# I need to set nargs to "?".  Took me like 10 minutes of Googling to figure
# that one out.
#
parser.add_argument("file", nargs="?", help = "JSON file to load", default = "output.json")
#parser.add_argument("--filter", help = "Filename text to filter on")

args = parser.parse_args()
logger.info("Args: %s" % args)


#
# Go through our DeleteMarkers and return a data structure that's
# distilled to just the key, date, and is_latest value
#
def processDeletes(data):

	retval = {}

	for row in data:

		ret = {}

		key = row["Key"]
		is_latest = row["IsLatest"]
		date = row["LastModified"]

		if not key in retval:
			#
			# New marker, just drop in our data
			#
			ret["is_latest"] = is_latest
			ret["latest_modified"] = date
			retval[key] = ret

		else:
			#
			# This file already has a delete marker, so
			# check the date.
			#
			if date > retval[key]["latest_modified"]:
				retval[key]["lastest_modified"] = date

		
	return(retval)


#
# Go through our Versiopns and return a data strucutre that's 
# distilled to just the key, date, is_latest, 
#
def processVersions(data):

	retval = {}

	for row in data:
		ret = {}

		key = row["Key"]
		date = row["LastModified"]
		size = row["Size"]

		if not key in retval:
			#
			# New file, just drop in our data.
			#
			ret["latest_modified"] = date
			ret["total_size"] = size
			ret["num_versions"] = 1	
			retval[key] = ret

		else:
			#
			# We already saw this filename, so update
			# what we have with this version and check the date.
			#
			retval[key]["total_size"] += size
			retval[key]["num_versions"] += 1

			if date > retval[key]["latest_modified"]:
				retval[key]["lastest_modified"] = date

	return(retval)


#
# Our main function, which reads from the input file, processes the data,
# and prints the results.
#
def main(input):

	with open(input) as f:
		data = json.load(f)

		delete_markers = processDeletes(data["DeleteMarkers"])
		#print(json.dumps(delete_markers, indent=2)) # Debugging

		versions = processVersions(data["Versions"])
		#print(json.dumps(versions, indent=2))



main(args.file)



